#version 330 core

// Ouput data
out vec4 fragColor;

in vec3 fColor;
in vec3 fNormal;
in vec3 fCameraPos;
in vec3 fLightDir;
in vec4 fPosition;
uniform int shaderState;

void main()
{
	fragColor = vec4(fColor, 1.0);
	if(shaderState < 8)
		return;
	
	vec3 cameraToFrag = vec3(fCameraPos.x - fPosition.x, fCameraPos.y - fPosition.y, fCameraPos.z - fPosition.z); 
	float brightness = sin(length(cameraToFrag));
	fragColor = brightness * vec4(fColor,1.0);

	if(shaderState<16)
		return;
	
	float dotProduct = dot(fNormal, fLightDir);
	vec3 lightedCol =fColor*dotProduct;
	
	fragColor = vec4(lightedCol, 1.0);

	if(shaderState < 24)
		return;
	
	lightedCol = vec3(0.8,0.8,0.8) * dotProduct;
	
	vec3 cameraToFragN = normalize(cameraToFrag);
	
	float outlineDotProduct = dot(cameraToFragN, fNormal)/1.6;
	
	outlineDotProduct = -((outlineDotProduct-1) * (outlineDotProduct-1)) + 1;
	
	
	vec3 outlineCol = vec3(fColor);

	
	fragColor = vec4((1-outlineDotProduct) * outlineCol + outlineDotProduct * lightedCol, 1.0);
	

}



