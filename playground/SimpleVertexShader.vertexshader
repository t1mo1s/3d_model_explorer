/*#version 450 core
// Input vertex data, different for all executions of this shader.
layout(location = 0) in vec3 vertexPosition_modelspace;
layout(location = 1) in vec3 vertexNormal_modelspace;

// Values that stay constant for the whole mesh.
uniform mat4 MVP;
uniform mat4 M;
//Output variables
out vec3 fColor;
out vec3 fNormal;
out vec3 fCameraPos;
out vec3 fLightDir;
out vec4 fPosition;

void main(){

	fLightDir = vec3(1,0,0);
	
	vec4 normalM = M * vec4(vertexNormal_modelspace, 0);
	fNormal = normalize(normalM.xyz);
	fColor = vec3(0.5, 0.1, 0.2);
	fCameraPos = vec3(4, 8, -5);
	
	gl_Position =  MVP * vec4(vertexPosition_modelspace,1);
	
	fPosition = M * vec4(vertexPosition_modelspace,1);
	
}

*/








#version 450 core
layout(location = 0) in vec3 vertexPosition_modelspace;
layout(location = 2) in vec2 vertexUV;

// Values that stay constant for the whole mesh.
uniform mat4 MVP;
uniform mat4 M;
//Output variables

out vec2 UV;
void main(){

	gl_Position =  MVP * vec4(vertexPosition_modelspace,1);
	UV = vertexUV;
	
}